1.关于printf中%02d和%0.2f分别是两位整数和两位小数的输出。
printf("%02d",something);
printf("%0.2d",something);

2. 二维数组
struct Node{
	int v;
	int w;
}
vector<vector<Node> > array;
或者是vector<Node> array[maxn];

将array中num个元素初始化为0
vector<int> array(num,0);
  for(int i=0;i<num;i++){
    scanf("%d",&array[i]);
  }
vector中的东西要是想要输入，依旧要使用地址
学会使用容器迭代器，vector.begin() vector.end()


3. 一般情况下，scanf的目标是char[maxn]类型的，可以不用&
而目标是vector等等，必须要加上&

4. 学会使用这个struct
比如说学生有学号又有座位号成绩等等，就可以声明一个结构体专门用于存放这个学号、座位号、结构体等等。
然后，又比如一个镇上的人年龄，可以专门创建一个结构体存放姓名和生日等等。
一般图的节点都是有点权+邻接节点的，所以一种常见的邻接表的写法就是：
struct node{
	int v;
	bool vis;
};
vector<node> Adjlist[maxn];

3. 
char[maxn] 赋值strcpy(destination,source)
比较 strcmp() strcat() 字符串划分操作strtok() strlen 定位字串的位置strstr()

4. set 
同样的元素只保留一次，并且自动进行从低到高的排序工作，非常方便。
set<int> st;
set<int>::iterator ite = st.begin();ite != st.end();ite++;  

iterator set.begin()   所有容器
iterator set.end()     所有容器
int set.max_size()   
int st.size()
bool st.empty()  
void st.clear()
使用begin和end之前都是要首先使用empty判断是不是空的，只有不空的集合才可以进行元素的输入和输出
int set.count(int value )返回value在set中出现的次数情况   Returns the number of elements in the range [first,last) that compare equal to val.【适用于所有的容器】

4. 进制转化模板
int x,int base;
scanf("%d%d",&x,&base);
int y[40],int count=0;
while(x!=0){
	y[count++] = x%base;
	x = x/base;
}
//最后的结果存储在y数组之中

6.输入字符串，可以考虑cin 或者是sscanf();简单来说就是string-scanf，但是最后要加上一个空格吸收符号，也就是getchar()

7. pat的字符串题，需要考虑本身输入的东西对不对，这样可以极大地简化计算，比如，你有的身份证号可能黑盒测试输入的是a b之类的东西，所以你要首先判断输入的东西是不是符合你的算法。

#define GET_ARRAY_LENGTH
在C语言中习惯上在?使用时都把它定义成一个宏，比如#define GET_ARRAY_LEN(array,len){len=(sizeof(array)/sizeof(array[0]));}?。而在C++中则可以使用模板 技术定义一个函

9. 字符串的存储――二维数组
对于被空格分割的字符串，可以用char[maxn][maxn]进行研究
while(scanf("%s",word[i])!= EOF)的情况，每个单词输入到一个数组中去

10. 字符串的读取
cin 
getline
sscanf

涉及到stringSTL的两个函数find和substr
不涉及STL的，用strtok函数进行字符串分割

11. 注意char元素和int元素
str1[i-1] = (str2[i-1] - str1[i-1])>=0?(str2[i-1]-str1[i-1]+'0'):(str2[i-1]-str1[i-1]+10+'0'); 
比如我的str1数组是一个char数组，但实际上，str2[i-1]-str1[i-1]之间的差不是一个char类型的东西，所以要加上'0';


12. 注意字符串数组不是string而是char的二维数组

13. 关于堆栈和队列，还有循环队列都是可以用数组和两个指针进行模拟的

14. scanf读取字符数组只需要数组名

15. 数据读取
在大型的while循环中，getchar()读取的是换行符，然后使用gets来读取一行，直到换行符/n为止
for(int i=0;i<n;i++){
	getchar();
	gets(array_name);
}


16. cin.getline(istream& is ,string& str ,char* delimiter);

char ch[20];
cout<<"enter a sentence:"<<endl;
cin>>ch;
cout<<"The string read with cin is:"<<ch<<endl;
cin.getline(ch,20,'/');  //读个字符或遇'/'结束
cout<<"The second part is:"<<ch<<endl;
cin.getline(ch,20);  //读个字符或遇'/n'结束
cout<<"The third part is:"<<ch<<endl;

19. 字符读取函数
1、cin 
cin 遇“空格”、“TAB”、“回车”都结束  /b /t /n
2、cin.get()     接受一个字符串，可以接收空格并输出
cin.get(char_name)

3、cin.getline()  属于iostream的一个方法，根据大小或者是末尾的分割符号进行读取
cin.getline(char[]_name,size_t n)
eg: std::cin.getline(name, 6, '#');

4、getline()      属于string的一个方法，根据末尾的分割符号进行读取
接受一个字符串，可以接收空格并输出,读取的字符流是用istream& is作为一个参数传递进去的，然后结果输出到string&中去。

5、gets() 
6、getchar()
cin.getchar(char[]_name,size_t n) 可以接收空格

附:cin.ignore();cin.get()//跳过一个字符,例如不想要的回车,空格等字符
7. fgets函数，本身是一个C++函数，读取的是一个字符串




22. 对结构体数组的快速定义
struct node{
	node(int _x,int _y):x(_x),y(_y){}
}Node[maxn]


24. 注意C++的编译器对于== 还是=不会作出明确的反馈，也就是说，有些错误明确的就是因为本来应该用=的地方用了==，然后就错了。
GCC不会对这种错误做任何的反映。务必最高注意！！

26.     //实践证明，这种说法还是很有用也是很可行的。 
    else return strcmp(a.id,b.id)<0; 
	字符数组的比较必须要用到strcmp这种感觉的东西，而对于字符串的比较就可以直接用大于小于。
	
1234567890001 95
1234567890005 100
1234567890003 95
1234567890002 77
1234567890004 85

这种字符串的比较就是可以用strcmp来比较
但是务必要注意，strcmp这个东西的返回结果不是0，而是int,大于零小于零都代表二者不匹配

27. int 可以表示的范围至少是2*10的10次方这么大的东西。
所以如果数据最多是一个9位的整数或者是一个1*10^10，你完全是可以用int的

28. 特别注意！！！！！
if(stu[i].id == a) 和 if(strcmp(stu[i].id,a))这两种情况，以后所有的字符串比较，所有的字符串比较，优先使用strcmp而不是那个狗屎==号！！！！

30. 字符数组的元素的scanf是要求你使用scanf("%s",array_name[i])
而数字数组的元素的scanf要求你使用scanf("%d",&array_name[i]);

31. （1）itoa函数――――――――功能：把一整数转换为字符数组
char *  itoa ( int value, char * str, int base );
2）atoi函数――――功能：把字符数组转换成整型

32. 在C11中，变成了std::to_string
std::string =  std::to_string(number);
也就是原来的itoa只不过更加的强大了= =泛型

strlen(const char* ) 
C11中的string专门STL的容器，应该使用.Length()属性进行查看

35. string.erase(size_t a,size_t b);
string& erase (size_t pos = 0, size_t len = npos);
也就是从a的位置开始移除b长度的数组



36. 关于string.strlen()和string.size()的情况
.size()是STL容器函数
.length()是string专属函数

min[0] == "0" 编译错误，因为min[0]是字符不是字符串
min[0] == '0' 对

38. 关于A1075这个题
这个题分为提交和未提交两种，提交的要不就是0分，要不就是正分
但是没提交的问题，肯定是-1

所以要求你对数据结构的设置非常明确
此外要统计好perfect和fail的情况

同时，每次输入一个记录都要求你自己要明确的知道原来的结构体数组中有没有，当然是需要进行for循环遍历操作了

最后要明确的是cmp函数
如果你最后的排序结果要求分数递减，那就return a.score>b.score
如果你要求id按照字母顺序递增
那就 return a.id<b.id 
或者 return strcmp(a.id,b.id)<0

39. 用数组初始一个vector
vector<int> index(array,array+n);

而对于数组没有，数组只有array,array+N
对于一般的数组长度还要用sizeof/sizeof(array[0])来计算，对于字符数组可以用strlen来进行操作

40. char array[10][20] 和 string array[10]作用相同，但是相关的调用函数并不一样

41.数组元素赋值操作：
memset 或者是 fill都是可以的

实践证明length或者是length()不适用于数组，应该使用sizeof(array)/sizeof(array[0])来进行操作

sizeof函数返回的是一个变量的字符数，也就是多少多少byte
memset只用于给数组赋值为0或者是赋值为-1，所以这就是个弟弟

int array[5] = {-2}能做的仅仅是把第一个元素赋值为-2，而={}或者={0}可以把所有的元素赋值为0
bool vis[maxn] = {false};可以把数组中的所有元素设为false

42. scanf中的%s的功能是对空格或者是换行符进行识别，而%c对于空格或者是换行并不敏感

43.
对于vector中存的时内置类型的数据，如int，char，因为vector已经重载了“==”   、“！=”、  “<=”、 “>=”、 “<”、 “>”运算符，所以可以直接将两个vector用这些运算符比较。

区别.size和 sizeof这两种东西:
.size()是STL标准 sizeof函数返回的是一个变量的byte

memset是对于所有的字节进行赋值，应该说其参数和正常情况并不一样，而是完全不对应的一个东西。因为是字节赋值，所以直接用sizeof(数组名)就行了

getchar应该是一个一个字符的进行输入，然后可以用getchar来吸收换行，但是似乎getchar也会接收空格,你可以选择是不是要接收这个getchar()的结果

空字符的长度为0,空格符的长度为1
char a[] = "\0";
char b[] = " ";
cout << strlen(a) << endl;   //0
cout << strlen(b) << endl;   //1

//空格是" "，空字符是\0 或 null

使用getchar进行字符的输入一定要在最后的位置加上一个/0
使用gets或者是scanf就可以不用管了，照常处理就行了。

40. cstring__其实更多的是对于char item[10]的操作
包括strlen strcmp strcat(char array1[10],char array2[10]) 和 strcpy(destination,source)
还有就是传统的字符串转换函数也就是sscanf和 sprintf 其实这两个不是输入输出函数而是字符串转化函数

//从左到右，将array中的东西以%d写入到n中
sscanf(array,"%d",n);
//从右到左，将n以%d的格式写入到array中
sprintf(array,"%d",n);

//sscanf & sprintf
	char array[100]="123456789";
	int n;
	
	sscanf(array,"%d",n);
	printf("%d",n);
	
	sprintf(str,"%d",n);
	printf("%s",str);

sscanf将string转化为别的
sprintf将别的总成为stirng

需要注意的就是sscanf和scanf一样都是需要加上大量的&符号的


41. 指针
指针变量赋值使用的一定是地址，也就是变量的名字加上&符号取地址。
int* array = &val_array;同时数组名也是数组第一个元素的指针的名字也就是说
int array[10] -----> array = &a[0]; array这个名字本身就是指向第一个变量的指针



	三种参数传递方式，引用传递参数和指针传递参数和变量传递参数
	其中引用传递参数的时候
	void swap(int *a,int *b){
		int x;
		int* temp = &x;
		*temp =*a;
		*a= *b;
		*b = *temp;
		
	}
	
	对pointer赋值等于改变指针指向
	对*pointer赋值等于改变指针指向的地址的内容

42. 指针与数组
//对于数组而言，使用&获得地址，对于字符串或者是字符数组而言，不要使用&符号进行操作
array+i其实也是一种地址
所以，scanf("%d",a+i);就可以给第i个元素进行赋值，而不需要使用scanf("%d",&a[i]);

由于指针变量的自增操作，可以
for(int *i =array; i< a+10;i++) printf("%d",*i);
	其中i本身和a+10都是地址可以进行比较的
	
struct item{
	int id;
	char name[20];
	//四大构造函数 
	stu(){};
	stu(int _id,char _name[20]){
		id = _id;
		strcpy(name,_name);
	}
	stu(int _id){
		id = _id;
	}
	stu(char _name[20]){
		strcpy(name,_name);
	}
}stu;

简化构造函数
struct_type_name(parameter):struct_item1(_paramter1),struct_item2(_paramter2){};
//一个冒号，一堆小括号，一个大括号，最后没有分号，因为这是一个函数体。

struct item2{
	int id;
	char name;
//	item2(int _id,char _name):id(_id),name(_name){}
	item2(int _id,char _name){
		id = _id;
		name = _name; 
	}
}; 

struct struct_type{}
在main里面就可以声明struct_type创建一个struct变量了。
#include<iostream>
using namespace std;
struct point{
	int x;
	int y;
	//极其简化的构造函数 
	point(int _x,int _y):x(_x),y(_y){};
};
int main() {
	point pts = point(10,20);
	cout<<pts.x<<" "<<pts.y<<endl;
}

43. .string里主要是对于char[]处理的函数，而本身的string是STL函数，比如说是erase 和 size之类的。

cstring属于C库 string属于STL模板 还有cstdlib【C标准库】


cstdlib中的函数包括了:[标准库，包括了查找和替换等等]
atoi atol atof atoll 
strtod strtol strtof strtold strtoll strtoul strtoull
free malloc
rand srand 

44. 
cstring中的函数包括了：[对内存和数组进行操作]
memset
strcat strcpy strcmp 
size_t【一种由size_t返回的unsigned int类型】

45. 
对于不知道有多少组测试用例的题目，有两种方式，分别是
while(scanf("%s",str)!=EOF)
和 while(gets(str)!=NULL) + getchar()吸收空格

gets本身会吸收最后的换行符号，所以一般不需要再次使用getchar
而scanf不会处理空格和换行相反会用二者作为截止的标志，所以我们应该讲getchar和scanf进行搭配。

1.scanf输入字符串的时候不会接收Space空格，回车Enter，Tab键，则认为输入结束。【不处理回车，空格】
2.gets能接收空格键，回车键，Tab键，回车则认为输入结束                       【处理回车，空格】
3.getchar只能接受一个字符，遇到回车结束输入，可接受回车键。常用来吸收回车符 【可以吸收回车】

包括cin和scanf都是从数据流中读取数据的，所以说，如果数据缓冲区中残存上次没有读完的\n之类的东西，就会让scanf直接结束，因而我们非常需要的就是使用getchar读取输入。

1.scanf（）用%c，%s空格键，Tab键，回车键结束一次输入，不会舍弃最后的回车符或空格或Tab（即还在缓冲区中），可使用getchar来吸收scanf()执行之后的换行符。
2.getchar（）以回车键结束，也不会舍弃回车符（即存入缓存区）
3.gets（）以换行符结束，但之后会舍弃换行符并以'\0',代替(意思是'\n'不会被代入到字符数组中，也不会将换行符存入到缓存区)也就是说：gets()函数读取到\n（我们输入的回车）于是停止读取，但是它不会把\n包含到字符串里面去。然而，和它配合使用的puts函数，却在输出字符串的时候自动换行。

然后字符数组的最后结束标志就是一个空字符也就是0号Asc   \0
gets的原理就是把读进来的/n替换为/0之类的东西。而scanf虽然不会处理掉/n，但是对于读取进来的东西一样会在最后加上一个\0

scanf不会处理换行/n 和 空格32 ，但是以回车/r为结束标志
gets会处理/n和空格，但是一样以回车/r为结束标志  二者都是回车结束

scanf返回的是成功读取的参数的个数，如果没有读取到就返回-1.而对于EOF来说，EOF就是-1.所以while(scanf("%d",&n)!=EOF)就可以实现字符的读取工作。

最简单的说法，scanf要用getchar处理结尾的换行，scanf自己会处理回车，scanf以空格为结束标志
gets一直读取到换行符号位置，自己处理很多东西，然后可以读取带有空格的字符串


44. 最容易出现的错误，本来应该printf的位置你进行了scanf操作



ASCII的小写比大写要大32.。。。。。

A1084的思想就是：
对于str1中的每一个元素，都在str2中进行寻找，如果找到了，那就继续遍历str1的下一个，如果没有找到，就输出。
此外，在遍历str2的时候，将str2的所有的字母元素全部变成大写就行了。


对于B1033你要明确的知道一件事情就是：大写字母的成功输出，一个是需要小写字母，一个是需要上挡。
此外，你第一个字符串所谓的大写字母坏了，说明小写字母一定是坏了。当然如果26个大写字母的话，那可能是上挡坏了。

memset对于int数组只有0和-1是正确的结果
memset对于bool数组似乎是true和false都行
memset的用法
memset(array,value,sizeof(array));

因为你的这个bool数组都是1byte大小的数据所以当然true和false都可以的了。


所谓的字符串散列说到底也就是一个固定在0~128之间的一个标志数组。


#include<cmath>
ceil
floor 
round (四舍五入)
fabs  计算浮点数绝对值
abs 整数绝对值

#include<cstring>是包含了string.h库
而#include<string>包含的是STL

gets可以直接读取一行，读到换行为止，不管什么空格，
但是很遗憾的是C++中无法直接使用
所以使用scanf？？也不可以读取空格
cin？？？也不可以读取空格

char *gets_s(char *str, rsize_t n);  C11 
char * fgets ( char * str, int num, FILE * stream );

而gets功能最像的就是cin.getline();
cin.getline(s1, 100000); 有两种停止方式一个是读取到换行，一个是读取到了100000个

所以这么说来，其实gets_s也是两种方式的停止方式

45. 四大输入函数
纯cin 输入一行 遇到空格 换行结束
scanf 输入空格 或者是换行结束
cin.get(char_name) 用来接收字符
 ch = cin.get() 或者 cin.get(ch) ----接收字符
 cin.get(char array[],int n)-------接收一个字符数组
 注意cin.get是可以接收空格的，所以有两种结束方式一个是读取到规定长度的数组，另外一个是读取到换行符号
 
 和cin.getline()类似，但是cin.getline()属于istream流，而getline()属于string流，STL
 
 cstring 处理char[],string 属于STL
 
 PAT大忌就是说你把== 错写成了= 或者是颠倒了过来，这个问题就是说编译器不报错，这个问题不是一次两次了。
 
 A1048的特例就是说，如果需要两个一样大小的硬币的时候，你就需要判断是不是是不是真的有两个。所以hash数组要声明为int类型而不是bool类型的。
 
 1048为何会产生段错误？很简单，你虽然硬币最大是500的，但是你很大几率会涉及到大于500的面额，这个时候虽然是不存在的，但是你会默认去访问hash[m-i]这个是时候就是数组段错误了。解决办法有两个，一个是用大的hash数组，另一个是用if循环对m-i进行判断，一定要小于500
 
 
 分治
 递归 不断调用自己
 回溯 递归的剪枝操作
 迭代 循环操作
 
45
N皇后的问题就是递归全排列问题，但是不同的hashTable的作用不同。在全排列里面表示哪一个数字已经被使用了。但是在N皇后里面表示哪一行已经有皇后了。

46 
cin.get(char_name);
char_name = cin.get();

cin.getline(array_name,maxsize);
cin.get(array_name,maxsize);

cin.get(NULL);  //专门用于接收空格。

upper_bound和lower_bound的使用
lower_返回的是第一个>=key的指针，这个元素不比key小
upper_返回的是第一个<key的指针，这个元素大于key。
如果想要获取位置，要减去array这个数组,得到int

lower_bound
三种返回结果，一种是0，也就是所有的元素都大于等于你的key，一种是不越界的位置，最后一种是last越界位置，表示所有的值都小于你的key值。
upper_bound返回查找元素的第一个可安插位置，也就是“元素值>查找值”的第一个元素的位置
这两个函数都是基于二分查找的。并且查找区间左闭右开。

lower_bound( array_name+lower_bound , array_name+upper_bound ,key值)

binary_search(int array[],int size,int key) STL二分查找模板，最后返回middle或者是返回-1(没找到)  左闭右开区间。。。。

算法所操作的区间,是左闭右开区间,还是左闭右闭区间,这个区间,需要在循环初始化,循环体是否终止的判断中,以及每次修改left,right区间值这三个地方保持一致,否则就可能出错.
这句话怎么理解，理解方式就是，这个函数是反复使用的，对吧，你第一次如果没有找到结果，如果你本身是双闭的，那么你第二次1也应该是双闭的，如果你的函数本来是双开的函数，但是你循环第二次之后变成了对于双闭区间的使用，这就会出错，轻一点的结果错误，严重的就是死循环。这也就是说，所有的递归函数，每次使用的条件都应该是一样的。
也就是说，双闭，可以是right = mid -1 ，但是双开，就是right = mid
而且mid也不是随便选的，不是说(left+right)/2，而是推荐使用left +(right-left)/2


iterator除了进行++,--操作，可以将iter+n,iter-n赋给一个新的iteraor对象。还可以使用一个iterator减去另外一个iterator.

2019年2月25日19:46:26
1. 二维数组进行初始化，一种方式就是使用fill进行操作，
比如一个G[maxn][maxn],你要是想对G进行初始化就是要fill(G[0],G[0]+maxn*maxn,inf);
而不是fill(G,G+maxn*maxn,inf);


2. goto 语句一个很好的作用是退出深嵌套例程。例如，请看下面的代码片段：

for(...) {
   for(...) {
      while(...) {
         if(...) goto stop;
         .
         .
         .
      }
   }
}
stop:
cout << "Error in program.\n";
//也就是goto语句非常的适合在嵌套中，一夜回到解放前中进行使用。也就是退出深嵌套循环。

3. malloc 和  free  new 和 delete是两大搭配

4  冒泡排序外层时次数，内层是遍历的次序，因为冒泡每次排序结束之后，都会将一个最大的元素放到队尾，
所以j是从0到n-i-1的位置。

strcmp主要是用于字符数组，然后返回0表示匹配，返回正或者负都表示一个大小的差别
struct node{
	int grade;
	char name[20];
	int age;
};
bool cmp(node a,node b){
	if(a.grade != b.grade){
		return a.grade < b.grade;
	}
	
	int tmp = strcmp(a.name,b.name);
	if(tmp!=0) return tmp<0;
	
	else return a.age < b.age;
}
bool cmp(node a,node b){
	if(a.score != b.score){
		return a.score > b.score;
	}
	else if(strcmp(a.name,b.name) !=0) return strcmp(a.name,b.name) < 0;
	else return a.age < b.age; 
}

