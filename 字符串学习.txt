1. strcmp的使用前提是对于这个const char*类型的元素。所以有些时候char []中的元素无法参与比较。而是要用双等号来比较。
同样的strcpy的使用也是需要const char*类型的元素，所以有些时候char[] 中的元素无法参与赋值。而是要用等号赋值。

2.  
int strcmp ( const char * str1, const char * str2 );
strcmp的结果
大于0的，表示第一个不匹配的字符，在str2中的值比在str1中的值要大
小于0的，表示第一个不匹配的字符在str2中的值比在str1中的值要小
等于0的，表示两个字符串完全相等

3. strcmp的使用，一定是要和0比较，因为最后的结果并不是一个简单的bool类型。
strcmp可以比较两个字符数组 ，可比较 字符串常量 和 字符数组，不适用于STL容器
==运算符可以比较字符串 字符数组 和 字符串常量

4. 
strcpy(destination,source)
strnpy(destination,source,size_t n) 也就是将指定的n个字符移动到某一个位置

5. string 容器函数
substr(size_t start,size_t length);
string str = find(size_t start,size_t length);

6. sscanf()这个东西不用于输入输出，而是单纯用于对string进行操作
/* sscanf example */
#include <stdio.h>

int main ()
{
  char sentence []="Rudolph is 12 years old";
  char str [20];
  int i;

  sscanf (sentence,"%s %*s %d",str,&i);
  printf ("%s -> %d\n",str,i);
  
  return 0;
}
7. substr(size_t start_position,size_t length)也就是一个字符串分割函数，第二个参数是length；

string str1 = "justin is lonely";
string str2 = str1.substr(0,10);
cout<<str2;
绝大多数的容器函数的第一个参数都是迭代器或者是开始操作的位置，而第二个参数一般都是待操作的数据的长度

8. char * strcpy ( char * destination, const char * source );   返回的结果是一个指向destination的指针
第一位的数据是目的地，第二位的数据是数据源
字符数组的拷贝，由于是涉及到了内存的，所以一定要用strcpy
/* strcpy example */
#include <stdio.h>
#include <string.h>

int main ()
{
  char str1[]="Sample string";
  char str2[40];
  char str3[40];
  strcpy (str2,str1);
  strcpy (str3,"copy successful");
  printf ("str1: %s\nstr2: %s\nstr3: %s\n",str1,str2,str3);
  return 0;
}


9.
C++ 中有大量的函数用来操作以 null 结尾的字符串：

序号	函数	    功能
1	    strcpy(s1,s2)	复制字符串 s2 到字符串 s1
2	    strcat(s1,s2)	连接字符串 s2 到字符串 s1 的末尾
3	    strlen(s1)	    返回字符串 s1 的长度
4	    strcmp(s1,s2)	返回s1与s2的比较结果
5	    strchr(s1,ch)	返回一个指针，指向字符串s1中字符ch的第一次出现的位置
6	    strstr(s1,s2)	返回一个指针，指向字符串s1中s2的第一次出现的位置

C风格的字符串是用\0也就是NULL做结尾的，而这一点在C++中得到了继承

C++ 标准库提供了 string 类类型，支持上述所有的操作，另外还增加了其他更多的功能。
append() – 在字符串的末尾添加字符
find() – 在字符串中查找字符串
insert() – 插入字符
length() – 返回字符串的长度
replace() – 替换字符串
substr() – 返回某个子字符串

	int main(){
		string str = "hello world!";
		string str2 = "ren chunzhe";
		str.append(str2);
		cout<<str<<endl;
	}

	// string::find
	#include <iostream>       // std::cout
	#include <string>         // std::string
	using namespace std;
	int main ()
	{
	  std::string str = "There are two needles in this haystack with needles.";
	  std::string str2  = "needle";

	  // different member versions of find in the same order as above:
	  // 注意find返回的结果是size_t 
	  size_t found = str.find(str2);
	  //如果最后还是找到了，因为返回的位置不是npos 
	  if (found != string::npos)
		std::cout << "first 'needle' found at: " << found << '\n';
		
	  found=str.find("needles are small",found+1,6);
	  if (found!=std::string::npos)
		std::cout << "second 'needle' found at: " << found << '\n';

	  found=str.find("haystack");
	  if (found!=std::string::npos)
		std::cout << "'haystack' also found at: " << found << '\n';

	  found=str.find('.');
	  if (found!=std::string::npos)
		std::cout << "Period found at: " << found << '\n';

	  // let's replace the first needle:
	  str.replace(str.find(str2),str2.length(),"preposition");
	  std::cout << str << '\n';

	  return 0;
	}


	string (1)    查找 C++ STL容器
	size_t string.find (const string& str, size_t pos = 0)
	对string串，从位置pos开始寻找str第一次出现位置，注意，一定要将结构和string.npos进行比较
	
	c-string (2)  查找C的字符串
	size_t find (const char* s, size_t pos = 0) const;
	注意除了在string中寻找一个string，也可以寻找一个char* 也就是C风格的字符串，但是要注意，是全匹配查找	
	
	string str = "1a2b3c4d5e 6f7g8h 9i1a2b3c4d5 e6f7g8ha9i";
	std::size_t position = str.find("5",10);
	if(position != str.npos) cout<<position<<endl;
	std::size_t position2 = str.find("根本不存在"); 
	if(position2 != str.npos) cout<<position2<<endl;

	str = "1a2b3c4d5e 6f7g8h 9i1a2b3c4d5 e6f7g8ha9i";
	char str2find[20] = "e 6";
	std::size_t pos= str.find(str2find);
	if(pos != str.npos) cout<<pos<<endl;

	buffer (3)	
	size_t find (const char* s, size_t pos, size_type n) const;
	str = "1a2b3c4d5e 6f7g8h 9i1a2b3c4d5 e6f7g8ha9i";
	strcpy(str2find,"e6");
	pos= str.find(str2find,0,2);	
	if(pos != str.npos) {
		cout<<"结果为:"<<pos<<endl;	
	}
	buffer寻找的意思就是在等待查找的字符串中，有多少个元素需要被匹配，本题如果是2，返回的结果就是位置30；如果是1，返回的结果就是位置9,也就是说buffer方法可以限定匹配的长度

	character (4) 也就是查找一个字符
	size_t find (char c, size_t pos = 0) const noexcept;
	总结：第一个位置是要查找的字符串，第二个位置是开始匹配的位置，第三个位置是可选的参数，比较匹配的长度是多少

	// string::find
#include <iostream>       // std::cout
#include <string>         // std::string

int main ()
{
  std::string str ("There are two needles in this haystack with needles.");
  std::string str2 ("needle");

  // different member versions of find in the same order as above:
  std::size_t found = str.find(str2);
  if (found!=std::string::npos)
    std::cout << "first 'needle' found at: " << found << '\n';

  found=str.find("needles are small",found+1,6);
  //给你一个串，开始查找的位置和最低匹配的长度，也就是说啊，我们不用全部都匹配，匹配到最低限度就行了
  if (found!=std::string::npos)
    std::cout << "second 'needle' found at: " << found << '\n';

//每次比较都要跟npos来比较，因为查找不到就会返回字符串的最后一位位置，也就是npos位置。
//所以，结果只有跟npos不一样的时候，才会返回
  found=str.find("haystack");
  if (found!=std::string::npos)
    std::cout << "'haystack' also found at: " << found << '\n';

  found=str.find('.');
  if (found!=std::string::npos)
    std::cout << "Period found at: " << found << '\n';

  // let's replace the first needle:
  //从哪里开始，匹配多长
  str.replace(str.find(str2),str2.length(),"preposition");
  std::cout << str << '\n';

  return 0;
}
	
	
C++中的字符串一般有以下四种类型，
	string
	char*
	const char*
	char[]
string是一个C++类库中的一个类，它位于名称空间std中，因此必须使用using编译指令或者std::string来引用它。它包含了对字符串的各种常用操作，它较char*的优势是内容可以动态拓展，以及对字符串操作的方便快捷，用+号进行字符串的连接是最常用的操作

char* 是指向字符串的指针(其实严格来说，它是指向字符串的首个字母)，你可以让它指向一串常量字符串。
const char * ，指针指向的是一个const char类型，即不能通过当前的指针对字符串的内容作出修改
char * const [指向字符的静态指针] 前者const修饰的是指针，代表不能改变指针 
const char * [指向静态字符的指针] 后者const修饰的是char，代表字符不能改变，但是指针可以变，也就是说该指针可以指针其他的const char。

char[]与char*与许多相同点，代表字符数组，可以对应一个字符串，如插入
char * a="string1";
char b[]="string2";
这里a是一个指向char变量的指针，b则是一个char数组（字符数组） 
但是char*是可以改变自己的指向的，而char[]的改变要通过strcpy函数进行操作
关于char* 和 char[]的区别——————
https://blog.csdn.net/ksws0292756/article/details/79432329


字符数组的赋值使用的是strcpy函数。
指针里面的所有东西都是地址，哪怕你给一个不是地址的东西，也会被解释为地址。
&+变量名 表示的是 变量的地址，不管这个变量是不是指针还是普通的变量
*+指针类型，表示指针所指向的变量的值
其中，对指针进行赋值，也要按照*pt = value进行赋值操作

 // 定义一个int类型的指针 p , 指针p存储的是i变量的地址值
    int* p = &i ;
    
 // 通过*p 我们操作i变量 ， 给i变量赋值20
    *p = 20 ;

	初始化一个指针，使用的是地址，也就是&+变量，而通过指针改变一个变量的值，也就是通过*+指针进行操作。
	
	指针也是一个变量 ， 如上int* p = &i , p就是一个指针变量 ， 这个变量存储的就是i变量的内存地址
	 指针变量的强大之处就在于 ， 他能通过内存地址去操作对应内存地址的内容 
	 *pt = 20 就是通过更改内存，更改pt所指向的内存的数值为20，也就是间接更改了指针所指向的变量的值。

string的erase操作：
sequence (1)    起点和长度
 string& erase (size_t pos = 0, size_t len = npos);
character (2)	某个字符
iterator erase (const_iterator p);
range (3)	    某个范围的字符
iterator erase (const_iterator first, const_iterator last); 

关于字母序的比较，最简单的无论是char array[]还是string都可以直接利用大于或者是小于进行比较。
然后也可以用strcmp进行比较，这种比较方式返回的结果包括大于等于或者是小于0.



字符串数组的初始化操作
#include<iostream>
#include<cstring>
using namespace std;
int main(){
	char index[8][8]={};
	for(int i=0;i<8;i++){
		for(int j=0;j<8;j++){
			cout<<index[i]<<endl;
		}
	}
}


std::string.substr 更多的是string类型下属的一个方法
其中，substr的两个参数一个是begin,一个是length
string substr (size_t pos = 0, size_t len = npos) const;
关于string，很重要的一个参数就是npos参数，其中呢，第一个应用是find，find的结果应该直接和string.npos进行比较 ，从而判断找到的位置是不是合适的。

关于char array[]的substr我目前没有找到任何合适的例子

char *strtok(char *str, const char *delim ；                似乎是对于字符数组进行分割的一个方式
size_t find ( const string& str, size_t pos = 0 ) const;    找到某一个子串在字符串string中的位置
string substr ( size_t pos = 0, size_t n = npos ) const;    进行字符串的分割
vector<string> split(string str,string pattern);            感觉像是一个正则化的匹配啊

#include<iostream> 
#include<cstring>
#include<cstdlib>
using namespace std;
int main(){
	char str[] ="a,sd,f,g,g,h,j";
	char *p;
	p = strtok(str,",");
	cout<<*p<<endl;
	while(p!=NULL){
		p = strtok(NULL,",");
		cout<<*p<<endl;
	}	
}

关于字符串分割，掌握两种方式，一种是C语言形式的字符串strtok()操作，一种是C++语言形式的string操作

主要就是一个
字符指针 = strtok(字符串,字符常量);
while(字符串不为空) 字符指针 = strtok(NULL,字符常量);

